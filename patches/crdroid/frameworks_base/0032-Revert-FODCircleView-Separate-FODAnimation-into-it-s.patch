From fe11fc66b3d10f5ca07b43c85c16f44efa26647f Mon Sep 17 00:00:00 2001
From: Victor Bo <bvoid@yandex.ru>
Date: Wed, 30 Sep 2020 01:41:27 -0400
Subject: [PATCH 32/57] Revert "FODCircleView: Separate FODAnimation into it's
 own class"

This reverts commit e3231d50e72f2c33aad9d4686ff8626f8c60e135.
---
 .../systemui/biometrics/FODAnimation.java     | 137 ------------------
 .../systemui/biometrics/FODCircleView.java    | 117 ++++++++++++++-
 2 files changed, 113 insertions(+), 141 deletions(-)
 delete mode 100644 packages/SystemUI/src/com/android/systemui/biometrics/FODAnimation.java

diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/FODAnimation.java b/packages/SystemUI/src/com/android/systemui/biometrics/FODAnimation.java
deleted file mode 100644
index d1071bb5764..00000000000
--- a/packages/SystemUI/src/com/android/systemui/biometrics/FODAnimation.java
+++ /dev/null
@@ -1,137 +0,0 @@
-/**
- * Copyright (C) 2019 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.android.systemui.biometrics;
-
-import android.content.Context;
-import android.content.res.Resources;
-import android.graphics.drawable.AnimationDrawable;
-import android.graphics.PixelFormat;
-import android.provider.Settings;
-import android.view.Gravity;
-import android.view.View;
-import android.view.WindowManager;
-import android.widget.ImageView;
-
-import com.android.systemui.R;
-
-public class FODAnimation extends ImageView {
-
-    private final WindowManager.LayoutParams mAnimParams = new WindowManager.LayoutParams();
-
-    private boolean mShowing = false;
-    private Context mContext;
-    private int mAnimationSize;
-    private int mAnimationPositionY;
-    private AnimationDrawable recognizingAnim;
-    private WindowManager mWindowManager;
-    private boolean mIsKeyguard;
-
-    public FODAnimation(Context context, int mPositionX, int mPositionY) {
-        super(context);
-
-        mContext = context;
-        mWindowManager = mContext.getSystemService(WindowManager.class);
-
-        mAnimationSize = mContext.getResources().getDimensionPixelSize(R.dimen.fod_animation_size);
-        mAnimParams.height = mAnimationSize;
-        mAnimParams.width = mAnimationSize;
-
-        mAnimParams.format = PixelFormat.TRANSLUCENT;
-        mAnimParams.type = WindowManager.LayoutParams.TYPE_VOLUME_OVERLAY; // it must be behind FOD icon
-        mAnimParams.flags =  WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE
-                | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS;
-        mAnimParams.gravity = Gravity.TOP | Gravity.CENTER;
-        mAnimParams.y = mPositionY - (mAnimationSize / 2);
-
-        setScaleType(ImageView.ScaleType.CENTER_INSIDE);
-        setFODAnim();
-        recognizingAnim = (AnimationDrawable) getBackground();
-    }
-
-    public int getFODAnim() {
-        return Settings.System.getInt(mContext.getContentResolver(),
-                Settings.System.FOD_ANIM, 0);
-    }
-
-    public void setFODAnim() {
-        int fodanim = getFODAnim();
-
-        if (fodanim == 0) {
-            this.setBackgroundResource(R.drawable.fod_miui_normal_recognizing_anim);
-        } else if (fodanim == 1) {
-            this.setBackgroundResource(R.drawable.fod_miui_aod_recognizing_anim);
-        } else if (fodanim == 2) {
-            this.setBackgroundResource(R.drawable.fod_miui_light_recognizing_anim);
-        } else if (fodanim == 3) {
-            this.setBackgroundResource(R.drawable.fod_miui_pop_recognizing_anim);
-        } else if (fodanim == 4) {
-            this.setBackgroundResource(R.drawable.fod_miui_pulse_recognizing_anim);
-        } else if (fodanim == 5) {
-            this.setBackgroundResource(R.drawable.fod_miui_pulse_recognizing_white_anim);
-        } else if (fodanim == 6) {
-            this.setBackgroundResource(R.drawable.fod_miui_rhythm_recognizing_anim);
-        } else if (fodanim == 7) {
-            this.setBackgroundResource(R.drawable.fod_op_cosmos_recognizing_anim);
-        } else if (fodanim == 8) {
-            this.setBackgroundResource(R.drawable.fod_op_mclaren_recognizing_anim);
-        } else if (fodanim == 9) {
-            this.setBackgroundResource(R.drawable.fod_op_stripe_recognizing_anim);
-        } else if (fodanim == 10) {
-            this.setBackgroundResource(R.drawable.fod_op_wave_recognizing_anim);
-        } else if (fodanim == 11) {
-            this.setBackgroundResource(R.drawable.fod_pureview_dna_recognizing_anim);
-        } else if (fodanim == 12) {
-            this.setBackgroundResource(R.drawable.fod_pureview_future_recognizing_anim);
-        } else if (fodanim == 13) {
-            this.setBackgroundResource(R.drawable.fod_pureview_halo_ring_recognizing_anim);
-        } else if (fodanim == 14) {
-            this.setBackgroundResource(R.drawable.fod_pureview_molecular_recognizing_anim);
-        }
-        recognizingAnim = (AnimationDrawable) getBackground();
-    }
-
-    public void updateParams(int mDreamingOffsetY) {
-        mAnimParams.y = mDreamingOffsetY - (mAnimationSize / 2);
-    }
-
-    public void setAnimationKeyguard(boolean state) {
-        mIsKeyguard = state;
-    }
-
-    public void showFODanimation() {
-        if (mAnimParams != null && !mShowing && mIsKeyguard) {
-            mShowing = true;
-            mWindowManager.addView(this, mAnimParams);
-            mWindowManager.updateViewLayout(this, mAnimParams);
-            recognizingAnim.start();
-        }
-    }
-
-    public void hideFODanimation() {
-        if (mShowing) {
-            mShowing = false;
-            if (recognizingAnim != null) {
-                clearAnimation();
-                recognizingAnim.stop();
-                recognizingAnim.selectDrawable(0);
-            }
-            if (this.getWindowToken() != null) {
-                mWindowManager.removeView(this);
-            }
-        }
-    }
-}
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/FODCircleView.java b/packages/SystemUI/src/com/android/systemui/biometrics/FODCircleView.java
index 2e7e71a32a3..5fe2d5bf2f7 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/FODCircleView.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/FODCircleView.java
@@ -292,18 +292,17 @@ public class FODCircleView extends ImageView implements ConfigurationListener {
         if (event.getAction() == MotionEvent.ACTION_DOWN && newIsInside) {
             showCircle();
             if (mIsRecognizingAnimEnabled) {
-                mHandler.post(() -> mFODAnimation.showFODanimation());
+                mFODAnimation.showFODanimation();
             }
             return true;
         } else if (event.getAction() == MotionEvent.ACTION_UP) {
             hideCircle();
-            mHandler.post(() -> mFODAnimation.hideFODanimation());
+            mFODAnimation.hideFODanimation();
             return true;
         } else if (event.getAction() == MotionEvent.ACTION_MOVE) {
             return true;
         }
-
-        mHandler.post(() -> mFODAnimation.hideFODanimation());
+        mFODAnimation.hideFODanimation();
         return false;
     }
 
@@ -647,3 +646,113 @@ public class FODCircleView extends ImageView implements ConfigurationListener {
         }
     }
 }
+
+class FODAnimation extends ImageView {
+
+    private Context mContext;
+    private int mAnimationPositionY;
+    private LayoutInflater mInflater;
+    private WindowManager mWindowManager;
+    private boolean mShowing = false;
+    private boolean mIsKeyguard;
+    private AnimationDrawable recognizingAnim;
+    private final WindowManager.LayoutParams mAnimParams = new WindowManager.LayoutParams();
+
+    public FODAnimation(Context context, int mPositionX, int mPositionY) {
+        super(context);
+
+        mContext = context;
+        mInflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+        mWindowManager = mContext.getSystemService(WindowManager.class);
+
+        mAnimParams.height = mContext.getResources().getDimensionPixelSize(R.dimen.fod_animation_size);
+        mAnimParams.width = mContext.getResources().getDimensionPixelSize(R.dimen.fod_animation_size);
+
+        mAnimationPositionY = (int) Math.round(mPositionY - (mContext.getResources().getDimensionPixelSize(R.dimen.fod_animation_size) / 2));
+
+        mAnimParams.format = PixelFormat.TRANSLUCENT;
+        mAnimParams.type = WindowManager.LayoutParams.TYPE_VOLUME_OVERLAY; // it must be behind FOD icon
+        mAnimParams.flags =  WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE
+                | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL | WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS;
+        mAnimParams.gravity = Gravity.TOP | Gravity.CENTER;
+        mAnimParams.y = mAnimationPositionY;
+
+        this.setScaleType(ImageView.ScaleType.CENTER_INSIDE);
+        setFODAnim();
+        recognizingAnim = (AnimationDrawable) this.getBackground();
+
+    }
+
+    public int getFODAnim() {
+        return Settings.System.getInt(mContext.getContentResolver(),
+                Settings.System.FOD_ANIM, 0);
+    }
+
+    public void setFODAnim() {
+        int fodanim = getFODAnim();
+
+        if (fodanim == 0) {
+            this.setBackgroundResource(R.drawable.fod_miui_normal_recognizing_anim);
+        } else if (fodanim == 1) {
+            this.setBackgroundResource(R.drawable.fod_miui_aod_recognizing_anim);
+        } else if (fodanim == 2) {
+            this.setBackgroundResource(R.drawable.fod_miui_light_recognizing_anim);
+        } else if (fodanim == 3) {
+            this.setBackgroundResource(R.drawable.fod_miui_pop_recognizing_anim);
+        } else if (fodanim == 4) {
+            this.setBackgroundResource(R.drawable.fod_miui_pulse_recognizing_anim);
+        } else if (fodanim == 5) {
+            this.setBackgroundResource(R.drawable.fod_miui_pulse_recognizing_white_anim);
+        } else if (fodanim == 6) {
+            this.setBackgroundResource(R.drawable.fod_miui_rhythm_recognizing_anim);
+        } else if (fodanim == 7) {
+            this.setBackgroundResource(R.drawable.fod_op_cosmos_recognizing_anim);
+        } else if (fodanim == 8) {
+            this.setBackgroundResource(R.drawable.fod_op_mclaren_recognizing_anim);
+        } else if (fodanim == 9) {
+            this.setBackgroundResource(R.drawable.fod_op_stripe_recognizing_anim);
+        } else if (fodanim == 10) {
+            this.setBackgroundResource(R.drawable.fod_op_wave_recognizing_anim);
+        } else if (fodanim == 11) {
+            this.setBackgroundResource(R.drawable.fod_pureview_dna_recognizing_anim);
+        } else if (fodanim == 12) {
+            this.setBackgroundResource(R.drawable.fod_pureview_future_recognizing_anim);
+        } else if (fodanim == 13) {
+            this.setBackgroundResource(R.drawable.fod_pureview_halo_ring_recognizing_anim);
+        } else if (fodanim == 14) {
+            this.setBackgroundResource(R.drawable.fod_pureview_molecular_recognizing_anim);
+        }
+        recognizingAnim = (AnimationDrawable) this.getBackground();
+    }
+
+    public void updateParams(int mDreamingOffsetY) {
+        mAnimationPositionY = (int) Math.round(mDreamingOffsetY - (mContext.getResources().getDimensionPixelSize(R.dimen.fod_animation_size) / 2));
+        mAnimParams.y = mAnimationPositionY;
+    }
+
+    public void setAnimationKeyguard(boolean state) {
+        mIsKeyguard = state;
+    }
+
+    public void showFODanimation() {
+        if (mAnimParams != null && !mShowing && mIsKeyguard) {
+            mShowing = true;
+            mWindowManager.addView(this, mAnimParams);
+            recognizingAnim.start();
+        }
+    }
+
+    public void hideFODanimation() {
+        if (mShowing) {
+            mShowing = false;
+            if (recognizingAnim != null) {
+                this.clearAnimation();
+                recognizingAnim.stop();
+                recognizingAnim.selectDrawable(0);
+            }
+            if (this.getWindowToken() != null) {
+                mWindowManager.removeView(this);
+            }
+        }
+    }
+}
-- 
2.17.1

