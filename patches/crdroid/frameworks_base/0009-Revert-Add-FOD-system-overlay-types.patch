From 85abadca410bc8a3375c7c86a48f6fb3cca53e62 Mon Sep 17 00:00:00 2001
From: Victor Bo <bvoid@yandex.ru>
Date: Wed, 30 Sep 2020 01:57:26 -0400
Subject: [PATCH 09/57] Revert "Add FOD system overlay types"

This reverts commit 750d7f88d2d3e2a6a42d39b63ad6ab9d5f139d1a.
---
 core/java/android/view/WindowManager.java           | 12 ------------
 .../android/systemui/biometrics/FODCircleView.java  |  3 +--
 .../android/server/policy/WindowManagerPolicy.java  |  6 ------
 .../java/com/android/server/wm/DisplayPolicy.java   | 13 ++-----------
 4 files changed, 3 insertions(+), 31 deletions(-)

diff --git a/core/java/android/view/WindowManager.java b/core/java/android/view/WindowManager.java
index dc843133d7b..4798d19e946 100644
--- a/core/java/android/view/WindowManager.java
+++ b/core/java/android/view/WindowManager.java
@@ -1110,18 +1110,6 @@ public interface WindowManager extends ViewManager {
          */
         public static final int TYPE_APPLICATION_OVERLAY = FIRST_SYSTEM_WINDOW + 38;
 
-        /**
-         * Window type: Fingerprint overlay
-         * @hide
-         */
-        public static final int TYPE_SYSTEM_FINGERPRINT = FIRST_SYSTEM_WINDOW + 39;
-
-        /**
-         * Window type: Fingerprint high light overlay
-         * @hide
-         */
-        public static final int TYPE_SYSTEM_FINGERPRINT_HIGH_LIGHT = FIRST_SYSTEM_WINDOW + 40;
-
         /**
          * End of types of system windows.
          */
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/FODCircleView.java b/packages/SystemUI/src/com/android/systemui/biometrics/FODCircleView.java
index 31482c9a80f..221c3fd4ffa 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/FODCircleView.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/FODCircleView.java
@@ -266,13 +266,12 @@ public class FODCircleView extends ImageView implements ConfigurationListener {
         mParams.format = PixelFormat.TRANSLUCENT;
 
         mParams.packageName = "android";
-        mParams.type = WindowManager.LayoutParams.TYPE_SYSTEM_FINGERPRINT;
+        mParams.type = WindowManager.LayoutParams.TYPE_DISPLAY_OVERLAY;
         mParams.flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE |
                 WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN;
         mParams.gravity = Gravity.TOP | Gravity.LEFT;
 
         mPressedParams.copyFrom(mParams);
-        mPressedParams.type = WindowManager.LayoutParams.TYPE_SYSTEM_FINGERPRINT_HIGH_LIGHT;
         mPressedParams.flags |= WindowManager.LayoutParams.FLAG_DIM_BEHIND;
 
         mParams.setTitle("Fingerprint on display");
diff --git a/services/core/java/com/android/server/policy/WindowManagerPolicy.java b/services/core/java/com/android/server/policy/WindowManagerPolicy.java
index 2036034d496..4a33009796d 100644
--- a/services/core/java/com/android/server/policy/WindowManagerPolicy.java
+++ b/services/core/java/com/android/server/policy/WindowManagerPolicy.java
@@ -53,8 +53,6 @@ import static android.view.WindowManager.LayoutParams.TYPE_STATUS_BAR_SUB_PANEL;
 import static android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ALERT;
 import static android.view.WindowManager.LayoutParams.TYPE_SYSTEM_DIALOG;
 import static android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ERROR;
-import static android.view.WindowManager.LayoutParams.TYPE_SYSTEM_FINGERPRINT;
-import static android.view.WindowManager.LayoutParams.TYPE_SYSTEM_FINGERPRINT_HIGH_LIGHT;
 import static android.view.WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY;
 import static android.view.WindowManager.LayoutParams.TYPE_TOAST;
 import static android.view.WindowManager.LayoutParams.TYPE_VOICE_INTERACTION;
@@ -896,10 +894,6 @@ public interface WindowManagerPolicy extends WindowManagerPolicyConstants {
             case TYPE_POINTER:
                 // the (mouse) pointer layer
                 return  33;
-            case TYPE_SYSTEM_FINGERPRINT:
-                return  34;
-            case TYPE_SYSTEM_FINGERPRINT_HIGH_LIGHT:
-                return  35;
             default:
                 Slog.e("WindowManager", "Unknown window type: " + type);
                 return APPLICATION_LAYER;
diff --git a/services/core/java/com/android/server/wm/DisplayPolicy.java b/services/core/java/com/android/server/wm/DisplayPolicy.java
index ea31c5fee51..8b756f1b75a 100644
--- a/services/core/java/com/android/server/wm/DisplayPolicy.java
+++ b/services/core/java/com/android/server/wm/DisplayPolicy.java
@@ -80,8 +80,6 @@ import static android.view.WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL;
 import static android.view.WindowManager.LayoutParams.TYPE_STATUS_BAR_SUB_PANEL;
 import static android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ALERT;
 import static android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ERROR;
-import static android.view.WindowManager.LayoutParams.TYPE_SYSTEM_FINGERPRINT;
-import static android.view.WindowManager.LayoutParams.TYPE_SYSTEM_FINGERPRINT_HIGH_LIGHT;
 import static android.view.WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY;
 import static android.view.WindowManager.LayoutParams.TYPE_TOAST;
 import static android.view.WindowManager.LayoutParams.TYPE_VOICE_INTERACTION;
@@ -1534,7 +1532,6 @@ public class DisplayPolicy {
         // For purposes of putting out fake window up to steal focus, we will
         // drive nav being hidden only by whether it is requested.
         final int sysui = mLastSystemUiFlags;
-        boolean fodVisible = false;
         boolean navVisible = (sysui & View.SYSTEM_UI_FLAG_HIDE_NAVIGATION) == 0;
         boolean navTranslucent = (sysui
                 & (View.NAVIGATION_BAR_TRANSLUCENT | View.NAVIGATION_BAR_TRANSPARENT)) != 0;
@@ -1571,12 +1568,7 @@ public class DisplayPolicy {
         // be hidden (because of the screen aspect ratio), then take that into account.
         navVisible |= !canHideNavigationBar();
 
-        if (!(mFocusedWindow != null && mFocusedWindow.getAttrs().type == TYPE_SYSTEM_FINGERPRINT
-                && !mService.mPowerManager.isInteractive())) {
-            fodVisible = true;
-        }
-
-        boolean updateSysUiVisibility = layoutNavigationBar(displayFrames, uiMode, navVisible & fodVisible,
+        boolean updateSysUiVisibility = layoutNavigationBar(displayFrames, uiMode, navVisible,
                 navTranslucent, navAllowedHidden, statusBarForcesShowingNavigation);
         if (DEBUG_LAYOUT) Slog.i(TAG, "mDock rect:" + displayFrames.mDock);
         updateSysUiVisibility |= layoutStatusBar(displayFrames, sysui, isKeyguardShowing);
@@ -2218,8 +2210,7 @@ public class DisplayPolicy {
                     df.set(displayFrames.mUnrestricted);
                     pf.set(displayFrames.mUnrestricted);
                     if (DEBUG_LAYOUT) Slog.v(TAG, "Laying out navigation bar window: " + pf);
-                } else if ((type == TYPE_SECURE_SYSTEM_OVERLAY || type == TYPE_SCREENSHOT
-                        || type == TYPE_SYSTEM_FINGERPRINT || type == TYPE_SYSTEM_FINGERPRINT_HIGH_LIGHT)
+                } else if ((type == TYPE_SECURE_SYSTEM_OVERLAY || type == TYPE_SCREENSHOT)
                         && ((fl & FLAG_FULLSCREEN) != 0)) {
                     // Fullscreen secure system overlays get what they ask for. Screenshot region
                     // selection overlay should also expand to full screen.
-- 
2.17.1

